package vlite.core

import org.junit.jupiter.api.DynamicTest
import java.util.*

/**
 * [2.19. Dynamic Tests](https://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests)
 * ```
 * Dynamic Test Lifecycle
 * The execution lifecycle of a dynamic test is quite different than it is for a standard @Test case.
 * Specifically, there are no lifecycle callbacks for individual dynamic tests.
 * This means that @BeforeEach and @AfterEach methods and
 * their corresponding extension callbacks are executed for the @TestFactory method
 * but not for each dynamic test.
 * In other words, if you access fields from the test instance within a lambda expression for a dynamic test,
 * those fields will not be reset by callback methods or
 * extensions between the execution of individual dynamic tests generated by the same @TestFactory method.
 * ```
 * Let's use [beforeEach], [afterEach] to simulate @BeforeEach and @AfterEach behaviour for each [DynamicTest]
 */
class KTestFactoryBuilder(
    private val prefix: String,
    private val beforeEach: () -> Unit,
    private val afterEach: () -> Unit,
) {

    private val mutableList = LinkedList<DynamicTest>()
    val list get() = mutableList.toList()

    operator fun String.invoke(testBlock: (displayName: String) -> Unit) {
        mutableList += DynamicTest.dynamicTest("$prefix$this") {
            beforeEach()
            try {
                testBlock(this)
            } finally {
                afterEach()
            }
        }
    }

    fun testGroup(groupName: String, block: KTestFactoryBuilder.() -> Unit) {
        mutableList += DynamicTest.dynamicTest("~~~ $groupName") { }
        mutableList += kTestFactory(".   ", beforeEach, afterEach, block)
        mutableList += DynamicTest.dynamicTest("~~~") { }
    }

    operator fun List<DynamicTest>.unaryPlus() {
        mutableList += this
    }

}

fun kTestFactory(
    prefix: String = "",
    beforeEach: () -> Unit = {},
    afterEach: () -> Unit = {},
    block: KTestFactoryBuilder.() -> Unit,
): List<DynamicTest> =
    KTestFactoryBuilder(prefix, beforeEach, afterEach).apply(block).list
