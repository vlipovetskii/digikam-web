package vlite.core.domain.services

/**
 * Based on code generated by jetbrains.
 * [standardHashOf] is to reduce boilerplate code
 */
@Suppress("unused")
fun standardHashOf(vararg properties: Any?, multiplier: Int = 31): Int {
    return properties.fold(0) { acc, property ->
        multiplier * acc + (property ?: 0).let {
            when {
                it is ByteArray -> it.contentHashCode()
                else -> it.hashCode()
            }
        }
    }
}

/**
 * Based on code generated by jetbrains.
 * [standardEqualsOf] is to reduce boilerplate code
 *
 * arePropertiesEquals: () -> Boolean instead of arePropertiesEquals: Boolean,
 * because the case when other is null is checked by
 * if (javaClass != other?.javaClass) return false.
 * Thus, isPropertyEquals expressions like name == other.name
 */
@Suppress("unused")
inline fun <reified T : Any> T.standardEqualsOf(other: Any?, vararg arePropertiesEquals: (T) -> Boolean): Boolean {
    if (this === other) return true
    if (javaClass != other?.javaClass) return false

    return arePropertiesEquals.fold(true) { acc, isPropertyEquals ->
        acc && isPropertyEquals(other as T)
    }
}